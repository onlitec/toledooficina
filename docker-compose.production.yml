version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: erp-oficina-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-erp_oficina}
      - POSTGRES_USER=${POSTGRES_USER:-erp_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - erp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-erp_user} -d ${POSTGRES_DB:-erp_oficina}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: erp-oficina-redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - erp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  backend:
    image: onlitec/toledooficina-backend:latest
    container_name: erp-oficina-backend
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-erp_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-erp_oficina}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - PYTHONPATH=/app
      - UPLOAD_FOLDER=/app/uploads
      - MAX_CONTENT_LENGTH=16777216
      - SESSION_COOKIE_SECURE=True
      - SESSION_COOKIE_HTTPONLY=True
      - SESSION_COOKIE_SAMESITE=Lax
      - PERMANENT_SESSION_LIFETIME=3600
      - WTF_CSRF_ENABLED=True
      - BCRYPT_LOG_ROUNDS=12
      - RATE_LIMIT_STORAGE_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
    volumes:
      - uploads_data:/app/uploads
      - backups_data:/app/backups
      - ./logs:/app/logs
    networks:
      - erp-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  frontend:
    image: onlitec/toledooficina-frontend:latest
    container_name: erp-oficina-frontend
    environment:
      - NODE_ENV=production
      - VITE_API_URL=https://${DOMAIN_NAME}/api
    networks:
      - erp-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  nginx:
    image: nginx:alpine
    container_name: erp-oficina-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.production.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
      - ./nginx/cache:/var/cache/nginx
    networks:
      - erp-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Serviço de backup automático
  backup:
    image: postgres:15-alpine
    container_name: erp-oficina-backup
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-erp_oficina}
      - POSTGRES_USER=${POSTGRES_USER:-erp_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGPASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts:/scripts:ro
    networks:
      - erp-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"
    profiles:
      - backup
    command: >
      sh -c '
        echo "Iniciando backup automático..."
        while true; do
          echo "Executando backup em $$(date)"
          pg_dump -h postgres -U $${POSTGRES_USER:-erp_user} -d $${POSTGRES_DB:-erp_oficina} > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
          echo "Backup concluído"
          # Manter apenas os últimos 7 backups
          ls -t /backups/backup_*.sql | tail -n +8 | xargs -r rm
          sleep 86400  # 24 horas
        done
      '

  # Monitoramento de logs
  logrotate:
    image: alpine:latest
    container_name: erp-oficina-logrotate
    volumes:
      - ./logs:/logs
      - ./nginx/logs:/nginx-logs
    restart: "no"
    profiles:
      - maintenance
    command: >
      sh -c '
        echo "Configurando rotação de logs..."
        while true; do
          find /logs -name "*.log" -size +100M -exec gzip {} \;
          find /nginx-logs -name "*.log" -size +100M -exec gzip {} \;
          find /logs -name "*.log.gz" -mtime +30 -delete
          find /nginx-logs -name "*.log.gz" -mtime +30 -delete
          sleep 3600  # 1 hora
        done
      '

networks:
  erp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.100.0.0/16
    driver_opts:
      com.docker.network.bridge.name: erp-bridge

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/redis
  uploads_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/uploads
  backups_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/backups