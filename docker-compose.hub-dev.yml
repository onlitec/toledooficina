version: '3.8'

# Docker Compose para DESENVOLVIMENTO usando imagens do Docker Hub
# Para usar: docker-compose -f docker-compose.hub-dev.yml up -d

services:
  postgres:
    image: postgres:15-alpine
    container_name: erp-oficina-postgres-dev
    environment:
      - POSTGRES_DB=erp_oficina_dev
      - POSTGRES_USER=erp_user_dev
      - POSTGRES_PASSWORD=dev_password_123
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    networks:
      - erp-network-dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U erp_user_dev -d erp_oficina_dev"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: erp-oficina-redis-dev
    command: redis-server --requirepass dev_redis_123
    volumes:
      - redis_dev_data:/data
    networks:
      - erp-network-dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "dev_redis_123", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  backend:
    image: onlitec/toledooficina-backend:dev
    container_name: erp-oficina-backend-dev
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - DATABASE_URL=postgresql://erp_user_dev:dev_password_123@postgres:5432/erp_oficina_dev
      - REDIS_URL=redis://:dev_redis_123@redis:6379/0
      - SECRET_KEY=dev_secret_key_123
      - JWT_SECRET_KEY=dev_jwt_secret_123
      - PYTHONPATH=/app
    volumes:
      - uploads_dev_data:/app/uploads
      - backups_dev_data:/app/backups
    networks:
      - erp-network-dev
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  frontend:
    image: onlitec/toledooficina-frontend:dev
    container_name: erp-oficina-frontend-dev
    ports:
      - "3000:80"  # Porta diferente para desenvolvimento
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - erp-network-dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  erp-network-dev:
    driver: bridge
    ipam:
      config:
        - subnet: 172.101.0.0/16

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  uploads_dev_data:
    driver: local
  backups_dev_data:
    driver: local