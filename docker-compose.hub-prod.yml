version: '3.8'

# Docker Compose para PRODUÇÃO usando imagens do Docker Hub
# Para usar: docker-compose -f docker-compose.hub-prod.yml up -d

services:
  postgres:
    image: postgres:15-alpine
    container_name: erp-oficina-postgres-prod
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-erp_oficina}
      - POSTGRES_USER=${POSTGRES_USER:-erp_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    networks:
      - erp-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-erp_user} -d ${POSTGRES_DB:-erp_oficina}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  redis:
    image: redis:7-alpine
    container_name: erp-oficina-redis-prod
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_prod_data:/data
    networks:
      - erp-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  backend:
    image: onlitec/toledooficina-backend:latest
    container_name: erp-oficina-backend-prod
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-erp_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-erp_oficina}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - PYTHONPATH=/app
      - DOMAIN_NAME=${DOMAIN_NAME:-localhost}
    volumes:
      - uploads_prod_data:/app/uploads
      - backups_prod_data:/app/backups
    networks:
      - erp-network-prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  frontend:
    image: onlitec/toledooficina-frontend:latest
    container_name: erp-oficina-frontend-prod
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - erp-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  nginx:
    image: nginx:alpine
    container_name: erp-oficina-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.production.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
      - ./nginx/cache:/var/cache/nginx
    networks:
      - erp-network-prod
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Backup automático para produção
  backup:
    image: postgres:15-alpine
    container_name: erp-oficina-backup-prod
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER:-erp_user}
      - POSTGRES_DB=${POSTGRES_DB:-erp_oficina}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-7}
    volumes:
      - backups_prod_data:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - erp-network-prod
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    command: >
      sh -c '
        echo "Configurando backup automático..."
        echo "0 2 * * * /backup.sh" | crontab -
        crond -f
      '
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'

networks:
  erp-network-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.102.0.0/16

volumes:
  postgres_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/postgres
  redis_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/redis
  uploads_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/uploads
  backups_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/backups