version: '3.8'

services:
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: erp-oficina-backend
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      - POSTGRES_DB=erp_oficina
      - POSTGRES_USER=erp_user
      - POSTGRES_PASSWORD=erp_password_2024
      - POSTGRES_HOST=postgres
      - PYTHONPATH=/app/src
      - SECRET_KEY=${SECRET_KEY:-your-default-secret-key-change-in-production}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-jwt-secret-key-change-in-production}
    volumes:
      - backend_data:/app/src/database
      - uploads_data:/app/uploads
      - backups_data:/app/backups
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - erp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:5000/')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.coolify
    container_name: erp-oficina-frontend
    environment:
      - VITE_API_URL=https://oficina.onlitec.com.br/api
    depends_on:
      backend:
        condition: service_started
    networks:
      - erp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: erp-oficina-postgres
    environment:
      POSTGRES_DB: erp_oficina
      POSTGRES_USER: erp_user
      POSTGRES_PASSWORD: erp_password_2024
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - erp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U erp_user -d erp_oficina"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy - SEMPRE ATIVO para Coolify
  nginx:
    image: nginx:alpine
    container_name: erp-oficina-nginx
    labels:
      - "coolify.managed=true"
      - "coolify.type=application"
      - "coolify.name=erp-oficina-nginx"
      - "traefik.enable=true"
      - "traefik.http.routers.erp-oficina.rule=Host(`oficina.onlitec.com.br`)"
      - "traefik.http.routers.erp-oficina.tls=true"
      - "traefik.http.routers.erp-oficina.tls.certresolver=letsencrypt"
      - "traefik.http.services.erp-oficina.loadbalancer.server.port=80"
    volumes:
      - ./nginx/nginx.coolify.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      frontend:
        condition: service_started
      backend:
        condition: service_started
    networks:
      - erp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

networks:
  erp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.101.0.0/16

volumes:
  backend_data:
    driver: local
  uploads_data:
    driver: local
  backups_data:
    driver: local
  postgres_data:
    driver: local
