#!/usr/bin/env python3
"""
Script para inicializar o banco de dados com dados b√°sicos
"""
import os
import sys

# Adicionar o diret√≥rio pai ao path
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

from src.models import db
from src.models.user import User
from src.models.cliente import Cliente
from src.models.veiculo import Veiculo
from src.models.peca import Peca, Categoria, Fornecedor
from src.models.ferramenta import Ferramenta
from src.models.ordem_servico import OrdemServico, TipoServico
from src.models.financeiro import ContaReceber, ContaPagar, FluxoCaixa
from src.models.configuracao import ConfiguracaoEmpresa, ConfiguracaoEmail, ConfiguracaoNotificacao, ConfiguracaoSistema
from flask import Flask

def create_app():
    """Criar aplica√ß√£o Flask para inicializa√ß√£o"""
    app = Flask(__name__)
    
    # Configurar SECRET_KEY
    try:
        with open('/run/secrets/secret_key', 'r') as f:
            app.config['SECRET_KEY'] = f.read().strip()
    except FileNotFoundError:
        app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev-key-change-in-production')
    
    # Configura√ß√£o do banco de dados
    db_user = os.environ.get('POSTGRES_USER')
    db_password = os.environ.get('POSTGRES_PASSWORD')
    db_host = os.environ.get('POSTGRES_HOST')
    db_name = os.environ.get('POSTGRES_DB')
    app.config['SQLALCHEMY_DATABASE_URI'] = f'postgresql://{db_user}:{db_password}@{db_host}/{db_name}'
    app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
    
    db.init_app(app)
    return app

def init_database():
    """Inicializar banco de dados com dados b√°sicos"""
    app = create_app()
    
    with app.app_context():
        print("üóÑÔ∏è Criando tabelas do banco de dados...")
        db.create_all()
        
        # Verificar se j√° existe usu√°rio admin
        admin_user = User.query.filter_by(username='AdminSuperUser').first()
        if not admin_user:
            print("üë§ Criando usu√°rio administrador padr√£o...")
            admin_user = User(
                username='AdminSuperUser',
                email='admin.super@oficina.com',
                nome_completo='Administrador do Sistema',
                role='admin',
                ativo=True
            )
            admin_user.set_password('AdM!n@2024#Sec$Pass')  # Senha complexa e segura
            db.session.add(admin_user)
            print("   ‚úÖ Usu√°rio admin criado (username: AdminSuperUser, senha: AdM!n@2024#Sec$Pass)")
        else:
            print("   ‚ÑπÔ∏è Usu√°rio admin j√° existe, atualizando senha para o padr√£o...")
            admin_user.set_password('AdM!n@2024#Sec$Pass')
            db.session.add(admin_user)
        
        # Criar usu√°rio de teste
        test_user = User.query.filter_by(username='user').first()
        if not test_user:
            print("üë§ Criando usu√°rio de teste...")
            test_user = User(
                username='user',
                email='user@oficina.com',
                nome_completo='Usu√°rio de Teste',
                role='user',
                ativo=True
            )
            test_user.set_password('user123')
            db.session.add(test_user)
            print("   ‚úÖ Usu√°rio de teste criado (username: user, senha: user123)")
        else:
            print("   ‚ÑπÔ∏è Usu√°rio de teste j√° existe")
        
        # Criar configura√ß√£o da empresa se n√£o existir
        config_empresa = ConfiguracaoEmpresa.query.first()
        if not config_empresa:
            print("üè¢ Criando configura√ß√£o da empresa...")
            config_empresa = ConfiguracaoEmpresa(
                razao_social='Oficina Mec√¢nica ERP Ltda',
                nome_fantasia='Oficina Mec√¢nica ERP',
                cnpj='00.000.000/0001-00',
                telefone='(11) 99999-9999',
                email='contato@oficina.com',
                endereco='Rua das Oficinas, 123',
                cidade='S√£o Paulo',
                estado='SP',
                cep='01234-567'
            )
            db.session.add(config_empresa)
            print("   ‚úÖ Configura√ß√£o da empresa criada")
        else:
            print("   ‚ÑπÔ∏è Configura√ß√£o da empresa j√° existe")
        
        # Criar configura√ß√£o de email se n√£o existir
        config_email = ConfiguracaoEmail.query.first()
        if not config_email:
            print("üìß Criando configura√ß√£o de email...")
            config_email = ConfiguracaoEmail(
                smtp_servidor='smtp.gmail.com',
                smtp_porta=587,
                smtp_usuario='seu-email@gmail.com',
                smtp_senha='sua-senha-app',
                smtp_tls=True,
                email_remetente='seu-email@gmail.com',
                nome_remetente='Oficina Mec√¢nica ERP'
            )
            db.session.add(config_email)
            print("   ‚úÖ Configura√ß√£o de email criada")
        else:
            print("   ‚ÑπÔ∏è Configura√ß√£o de email j√° existe")
        
        # Criar configura√ß√£o de notifica√ß√µes se n√£o existir
        config_notif = ConfiguracaoNotificacao.query.first()
        if not config_notif:
            print("üîî Criando configura√ß√£o de notifica√ß√µes...")
            config_notif = ConfiguracaoNotificacao(
                notificar_ordem_criada=True,
                notificar_ordem_concluida=True,
                notificar_vencimento_conta=True,
                notificar_estoque_baixo=True,
                emails_notificacao='admin@oficina.com'
            )
            db.session.add(config_notif)
            print("   ‚úÖ Configura√ß√£o de notifica√ß√µes criada")
        else:
            print("   ‚ÑπÔ∏è Configura√ß√£o de notifica√ß√µes j√° existe")
        
        # Criar configura√ß√£o do sistema se n√£o existir
        config_sistema = ConfiguracaoSistema.query.first()
        if not config_sistema:
            print("‚öôÔ∏è Criando configura√ß√£o do sistema...")
            config_sistema = ConfiguracaoSistema(
                nome_sistema='ERP Oficina Mec√¢nica',
                versao='1.0.0',
                manutencao=False,
                backup_automatico=True,
                intervalo_backup=24
            )
            db.session.add(config_sistema)
            print("   ‚úÖ Configura√ß√£o do sistema criada")
        else:
            print("   ‚ÑπÔ∏è Configura√ß√£o do sistema j√° existe")
        
        try:
            db.session.commit()
            print("\nüéâ Banco de dados inicializado com sucesso!")
            print("\nüìã INFORMA√á√ïES IMPORTANTES:")
            print("   üë§ Usu√°rio Admin: AdminSuperUser / AdM!n@2024#Sec$Pass")
            print("   üë§ Usu√°rio Teste: user / user123")
            print("   ‚ö†Ô∏è  ALTERE AS SENHAS PADR√ÉO IMEDIATAMENTE!")
            print("   üìß Configure o SMTP nas configura√ß√µes de email")
            print("   üè¢ Atualize os dados da empresa nas configura√ß√µes")
            return True
        except Exception as e:
            print(f"‚ùå Erro ao salvar no banco: {e}")
            db.session.rollback()
            return False

if __name__ == '__main__':
    print("üöÄ Inicializando banco de dados do ERP Oficina Mec√¢nica...")
    success = init_database()
    sys.exit(0 if success else 1)
