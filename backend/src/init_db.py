#!/usr/bin/env python3
"""
Script para inicializar o banco de dados com dados b√°sicos
"""
import os
import sys

# Adicionar o diret√≥rio pai ao path
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

from src.models import db
from src.models.user import User
from src.models.cliente import Cliente
from src.models.veiculo import Veiculo
from src.models.peca import Peca, Categoria, Fornecedor
from src.models.ferramenta import Ferramenta
from src.models.ordem_servico import OrdemServico, TipoServico
from src.models.financeiro import ContaReceber, ContaPagar, FluxoCaixa
from src.models.configuracao import ConfiguracaoEmpresa, ConfiguracaoEmail, ConfiguracaoNotificacao, ConfiguracaoSistema
from flask import Flask

def create_app():
    """Criar aplica√ß√£o Flask para inicializa√ß√£o"""
    app = Flask(__name__)
    
    # Configurar SECRET_KEY
    try:
        with open('/run/secrets/secret_key', 'r') as f:
            app.config['SECRET_KEY'] = f.read().strip()
    except FileNotFoundError:
        app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev-key-change-in-production')
    
    # Configura√ß√£o do banco de dados
    db_user = os.environ.get('POSTGRES_USER')
    db_password = os.environ.get('POSTGRES_PASSWORD')
    db_host = os.environ.get('POSTGRES_HOST')
    db_name = os.environ.get('POSTGRES_DB')
    app.config['SQLALCHEMY_DATABASE_URI'] = f'postgresql://{db_user}:{db_password}@{db_host}/{db_name}'
    app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
    
    db.init_app(app)
    return app

def init_database():
    """Inicializar banco de dados com dados b√°sicos"""
    app = create_app()
    
    with app.app_context():
        print("üóÑÔ∏è Criando tabelas do banco de dados...")
        db.create_all()
        
        # Verificar se j√° existe usu√°rio admin
        admin_user = User.query.filter_by(username='Admin').first()
        if not admin_user:
            print("üë§ Criando usu√°rio administrador padr√£o...")
            admin_user = User(
                username='Admin',
                email='admin@oficina.com',
                nome_completo='Administrador do Sistema',
                role='admin',
                ativo=True
            )
            admin_user.set_password('admin123')  # Senha padr√£o - DEVE SER ALTERADA
            db.session.add(admin_user)
            print("   ‚úÖ Usu√°rio admin criado (username: Admin, senha: admin123)")
        else:
            print("   ‚ÑπÔ∏è Usu√°rio admin j√° existe, atualizando senha para o padr√£o...")
            admin_user.set_password('admin123')
            db.session.add(admin_user)
        
        # Criar usu√°rio de teste
        test_user = User.query.filter_by(username='user').first()
        if not test_user:
            print("üë§ Criando usu√°rio de teste...")
            test_user = User(
                username='user',
                email='user@oficina.com',
                nome_completo='Usu√°rio de Teste',
                role='user',
                ativo=True
            )
            test_user.set_password('user123')
            db.session.add(test_user)
            print("   ‚úÖ Usu√°rio de teste criado (username: user, senha: user123)")
        else:
            print("   ‚ÑπÔ∏è Usu√°rio de teste j√° existe")
        
        # Criar configura√ß√£o da empresa se n√£o existir
        config_empresa = ConfiguracaoEmpresa.query.first()
        if not config_empresa:
            print("üè¢ Criando configura√ß√£o da empresa...")
            config_empresa = ConfiguracaoEmpresa(
                razao_social='Oficina Mec√¢nica ERP Ltda',
                nome_fantasia='Oficina Mec√¢nica ERP',
                cnpj='00.000.000/0001-00',
                telefone='(11) 99999-9999',
                email='contato@oficina.com',
                endereco='Rua das Oficinas, 123',
                cidade='S√£o Paulo',
                estado='SP',
                cep='01000-000'
            )
            db.session.add(config_empresa)
            print("   ‚úÖ Configura√ß√£o da empresa criada")
        else:
            print("   ‚ÑπÔ∏è Configura√ß√£o da empresa j√° existe")
        
        # Criar algumas categorias b√°sicas
        categorias_basicas = [
            ('Motor', 'Pe√ßas relacionadas ao motor'),
            ('Freios', 'Sistema de freios'),
            ('Suspens√£o', 'Sistema de suspens√£o'),
            ('El√©trica', 'Sistema el√©trico'),
            ('Filtros', 'Filtros diversos'),
            ('√ìleos', '√ìleos e lubrificantes')
        ]
        
        print("üì¶ Criando categorias b√°sicas...")
        for nome, descricao in categorias_basicas:
            categoria = Categoria.query.filter_by(nome=nome).first()
            if not categoria:
                categoria = Categoria(nome=nome, descricao=descricao)
                db.session.add(categoria)
                print(f"   ‚úÖ Categoria '{nome}' criada")
        
        # Criar alguns tipos de servi√ßo b√°sicos
        tipos_servico_basicos = [
            ('Troca de √ìleo', 'Troca de √≥leo do motor', 50.00, 1.0),
            ('Alinhamento', 'Alinhamento de dire√ß√£o', 80.00, 1.5),
            ('Balanceamento', 'Balanceamento de rodas', 60.00, 1.0),
            ('Revis√£o Geral', 'Revis√£o completa do ve√≠culo', 200.00, 4.0),
            ('Troca de Pastilhas', 'Troca de pastilhas de freio', 120.00, 2.0)
        ]
        
        print("üîß Criando tipos de servi√ßo b√°sicos...")
        for nome, descricao, valor, tempo in tipos_servico_basicos:
            tipo_servico = TipoServico.query.filter_by(nome=nome).first()
            if not tipo_servico:
                tipo_servico = TipoServico(
                    nome=nome,
                    descricao=descricao,
                    valor_padrao=valor,
                    tempo_estimado_horas=tempo
                )
                db.session.add(tipo_servico)
                print(f"   ‚úÖ Tipo de servi√ßo '{nome}' criado")
        
        try:
            print("üíæ Tentando fazer o commit das altera√ß√µes no banco de dados...")
            db.session.commit()
            print("   ‚úÖ Commit realizado com sucesso!")
            print("\nüéâ Banco de dados inicializado com sucesso!")
            print("\nüìã INFORMA√á√ïES IMPORTANTES:")
            print("   üë§ Usu√°rio Admin: Admin / admin123")
            print("   üë§ Usu√°rio Teste: user / user123")
            print("   ‚ö†Ô∏è  ALTERE AS SENHAS PADR√ÉO IMEDIATAMENTE!")
            print("\nüöÄ Sistema pronto para uso!")
            
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå Erro ao inicializar banco de dados: {str(e)}")
            return False
    
    return True

if __name__ == '__main__':
    print("üöÄ Inicializando banco de dados do ERP Oficina Mec√¢nica...")
    success = init_database()
    sys.exit(0 if success else 1)
