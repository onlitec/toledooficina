#!/bin/bash

# Script de demonstra√ß√£o - Docker Hub ERP Oficina
# Mostra como usar as imagens separadas por ambiente

echo "üê≥ Demonstra√ß√£o Docker Hub - ERP Oficina Mec√¢nica"
echo "================================================="
echo ""
echo "Este script demonstra como usar as imagens Docker Hub"
echo "separadas por ambiente (desenvolvimento e produ√ß√£o)."
echo ""

# Fun√ß√£o para mostrar menu
show_menu() {
    echo "üéØ Selecione uma op√ß√£o:"
    echo ""
    echo "1) üîß Executar ambiente de DESENVOLVIMENTO"
    echo "2) üöÄ Executar ambiente de PRODU√á√ÉO"
    echo "3) üì• Baixar apenas as imagens"
    echo "4) üìã Listar imagens dispon√≠veis"
    echo "5) üßπ Limpar ambientes"
    echo "6) ‚ùå Sair"
    echo ""
    read -p "Escolha uma op√ß√£o (1-6): " choice
}

# Fun√ß√£o para executar desenvolvimento
run_development() {
    echo ""
    echo "üîß Executando ambiente de DESENVOLVIMENTO..."
    echo "============================================="
    echo ""
    
    if [ ! -f "docker-compose.hub-dev.yml" ]; then
        echo "üì• Baixando docker-compose.hub-dev.yml..."
        wget -q https://raw.githubusercontent.com/onlitec/toledooficina/main/docker-compose.hub-dev.yml
    fi
    
    if [ ! -f ".env.hub-dev" ]; then
        echo "üì• Baixando .env.hub-dev..."
        wget -q https://raw.githubusercontent.com/onlitec/toledooficina/main/.env.hub-dev
    fi
    
    echo "üöÄ Iniciando containers de desenvolvimento..."
    docker-compose -f docker-compose.hub-dev.yml --env-file .env.hub-dev up -d
    
    echo ""
    echo "‚úÖ Ambiente de desenvolvimento iniciado!"
    echo ""
    echo "üåê Acesso:"
    echo "   Frontend: http://localhost:3000"
    echo "   Backend API: http://localhost:3000/api"
    echo "   Banco: PostgreSQL na porta padr√£o (interno)"
    echo "   Cache: Redis na porta padr√£o (interno)"
    echo ""
    echo "üìã Containers criados:"
    docker ps | grep "dev" | awk '{print "   " $1 " - " $(NF)}'
}

# Fun√ß√£o para executar produ√ß√£o
run_production() {
    echo ""
    echo "üöÄ Executando ambiente de PRODU√á√ÉO..."
    echo "====================================="
    echo ""
    
    if [ ! -f "docker-compose.hub-prod.yml" ]; then
        echo "üì• Baixando docker-compose.hub-prod.yml..."
        wget -q https://raw.githubusercontent.com/onlitec/toledooficina/main/docker-compose.hub-prod.yml
    fi
    
    if [ ! -f ".env.hub-prod" ]; then
        echo "üì• Baixando .env.hub-prod..."
        wget -q https://raw.githubusercontent.com/onlitec/toledooficina/main/.env.hub-prod
        echo ""
        echo "‚ö†Ô∏è  IMPORTANTE: Configure o arquivo .env.hub-prod antes de continuar!"
        echo "   Edite as senhas, dom√≠nio e outras configura√ß√µes de produ√ß√£o."
        echo ""
        read -p "Deseja editar o arquivo agora? (y/N): " edit_env
        if [[ $edit_env =~ ^[Yy]$ ]]; then
            nano .env.hub-prod
        fi
    fi
    
    echo "üöÄ Iniciando containers de produ√ß√£o..."
    docker-compose -f docker-compose.hub-prod.yml --env-file .env.hub-prod up -d
    
    echo ""
    echo "‚úÖ Ambiente de produ√ß√£o iniciado!"
    echo ""
    echo "üåê Acesso:"
    echo "   Frontend: http://seu-dominio.com (configure no .env.hub-prod)"
    echo "   Backend API: http://seu-dominio.com/api"
    echo "   HTTPS: https://seu-dominio.com (se SSL configurado)"
    echo ""
    echo "üìã Containers criados:"
    docker ps | grep "prod" | awk '{print "   " $1 " - " $(NF)}'
}

# Fun√ß√£o para baixar imagens
download_images() {
    echo ""
    echo "üì• Baixando imagens do Docker Hub..."
    echo "==================================="
    echo ""
    
    echo "üîß Baixando imagens de desenvolvimento..."
    docker pull onlitec/toledooficina-backend:dev
    docker pull onlitec/toledooficina-frontend:dev
    docker pull postgres:15-alpine
    docker pull redis:7-alpine
    
    echo ""
    echo "üöÄ Baixando imagens de produ√ß√£o..."
    docker pull onlitec/toledooficina-backend:latest
    docker pull onlitec/toledooficina-frontend:latest
    docker pull nginx:alpine
    
    echo ""
    echo "‚úÖ Download conclu√≠do!"
    echo ""
    echo "üìã Imagens baixadas:"
    docker images | grep -E "(onlitec|postgres|redis|nginx)" | head -10
}

# Fun√ß√£o para listar imagens
list_images() {
    echo ""
    echo "üìã Imagens Docker Hub dispon√≠veis"
    echo "================================="
    echo ""
    echo "üîß DESENVOLVIMENTO:"
    echo "   onlitec/toledooficina-backend:dev"
    echo "   onlitec/toledooficina-backend:latest-dev"
    echo "   onlitec/toledooficina-frontend:dev"
    echo "   onlitec/toledooficina-frontend:latest-dev"
    echo ""
    echo "üöÄ PRODU√á√ÉO:"
    echo "   onlitec/toledooficina-backend:latest"
    echo "   onlitec/toledooficina-backend:prod"
    echo "   onlitec/toledooficina-backend:v1.2"
    echo "   onlitec/toledooficina-frontend:latest"
    echo "   onlitec/toledooficina-frontend:prod"
    echo "   onlitec/toledooficina-frontend:v1.2"
    echo ""
    echo "üóÉÔ∏è INFRAESTRUTURA:"
    echo "   postgres:15-alpine"
    echo "   redis:7-alpine"
    echo "   nginx:alpine"
    echo ""
    echo "üìã Imagens locais:"
    docker images | grep -E "(onlitec|postgres|redis|nginx)" || echo "   Nenhuma imagem encontrada localmente"
}

# Fun√ß√£o para limpar ambientes
clean_environments() {
    echo ""
    echo "üßπ Limpeza de ambientes"
    echo "======================="
    echo ""
    echo "‚ö†Ô∏è  Esta opera√ß√£o ir√° parar e remover containers!"
    echo ""
    echo "1) Limpar apenas desenvolvimento"
    echo "2) Limpar apenas produ√ß√£o"
    echo "3) Limpar ambos os ambientes"
    echo "4) Voltar ao menu principal"
    echo ""
    read -p "Escolha uma op√ß√£o (1-4): " clean_choice
    
    case $clean_choice in
        1)
            echo "üßπ Limpando ambiente de desenvolvimento..."
            docker-compose -f docker-compose.hub-dev.yml down -v 2>/dev/null || echo "Ambiente de desenvolvimento n√£o estava rodando"
            echo "‚úÖ Desenvolvimento limpo!"
            ;;
        2)
            echo "üßπ Limpando ambiente de produ√ß√£o..."
            docker-compose -f docker-compose.hub-prod.yml down 2>/dev/null || echo "Ambiente de produ√ß√£o n√£o estava rodando"
            echo "‚úÖ Produ√ß√£o limpa!"
            ;;
        3)
            echo "üßπ Limpando ambos os ambientes..."
            docker-compose -f docker-compose.hub-dev.yml down -v 2>/dev/null || echo "Desenvolvimento n√£o estava rodando"
            docker-compose -f docker-compose.hub-prod.yml down 2>/dev/null || echo "Produ√ß√£o n√£o estava rodando"
            echo "‚úÖ Ambos os ambientes limpos!"
            ;;
        4)
            return
            ;;
        *)
            echo "‚ùå Op√ß√£o inv√°lida!"
            ;;
    esac
}

# Loop principal
while true; do
    show_menu
    
    case $choice in
        1)
            run_development
            ;;
        2)
            run_production
            ;;
        3)
            download_images
            ;;
        4)
            list_images
            ;;
        5)
            clean_environments
            ;;
        6)
            echo ""
            echo "üëã Obrigado por usar o ERP Oficina Mec√¢nica!"
            echo "üîó Links √∫teis:"
            echo "   Backend: https://hub.docker.com/r/onlitec/toledooficina-backend"
            echo "   Frontend: https://hub.docker.com/r/onlitec/toledooficina-frontend"
            echo "   Documenta√ß√£o: https://github.com/onlitec/toledooficina"
            echo ""
            exit 0
            ;;
        *)
            echo "‚ùå Op√ß√£o inv√°lida! Tente novamente."
            ;;
    esac
    
    echo ""
    read -p "Pressione Enter para continuar..."
    clear
done