#!/bin/bash

# Script para validar se todos os scripts de deployment foram criados corretamente
# Este script verifica a exist√™ncia e permiss√µes dos scripts necess√°rios

set -e  # Sair imediatamente se um comando falhar

echo "=============================================="
echo "  VALIDA√á√ÉO DO DEPLOYMENT DE PRODU√á√ÉO"
echo "=============================================="
echo "Data: $(date)"
echo ""

# Fun√ß√£o para verificar arquivo
check_file() {
    local file=$1
    local description=$2
    
    if [ -f "$file" ]; then
        echo "‚úÖ $description: $file"
        return 0
    else
        echo "‚ùå $description: $file (N√ÉO ENCONTRADO)"
        return 1
    fi
}

# Fun√ß√£o para verificar permiss√µes execut√°veis
check_executable() {
    local file=$1
    local description=$2
    
    if [ -x "$file" ]; then
        echo "‚úÖ $description: Permiss√µes corretas"
        return 0
    else
        echo "‚ö†Ô∏è $description: Permiss√µes incorretas (use chmod +x)"
        return 1
    fi
}

# Fun√ß√£o para verificar conte√∫do do script
check_script_content() {
    local file=$1
    local description=$2
    local keyword=$3
    
    if grep -q "$keyword" "$file" 2>/dev/null; then
        echo "‚úÖ $description: Conte√∫do v√°lido"
        return 0
    else
        echo "‚ùå $description: Conte√∫do inv√°lido ou ausente"
        return 1
    fi
}

# Contadores
total_checks=0
passed_checks=0

echo "üîç VERIFICANDO ARQUIVOS DE SCRIPT..."
echo "====================================="

# Verificar scripts principais
scripts=(
    "backup_system.sh:Script de backup do sistema"
    "generate_secrets.sh:Script de gera√ß√£o de segredos"
    "setup_ssl.sh:Script de configura√ß√£o SSL"
    "setup_firewall.sh:Script de configura√ß√£o de firewall"
    "update_docker_compose.sh:Script de atualiza√ß√£o do docker-compose"
    "setup_monitoring.sh:Script de configura√ß√£o de monitoramento"
    "deploy_production.sh:Script principal de deployment"
    "PRODUCTION_DEPLOYMENT.md:Documenta√ß√£o de deployment"
)

for script_info in "${scripts[@]}"; do
    IFS=':' read -r script description <<< "$script_info"
    
    if check_file "$script" "$description"; then
        passed_checks=$((passed_checks + 1))
    fi
    total_checks=$((total_checks + 1))
    
    # Verificar se √© um script shell e validar conte√∫do
    if [[ "$script" == *.sh ]]; then
        if check_script_content "$script" "Valida√ß√£o de conte√∫do" "#!/bin/bash"; then
            passed_checks=$((passed_checks + 1))
        fi
        total_checks=$((total_checks + 1))
    fi
done

echo ""
echo "üîç VERIFICANDO PERMISS√ïES..."
echo "============================="

# Verificar permiss√µes execut√°veis
executable_scripts=(
    "backup_system.sh"
    "generate_secrets.sh"
    "setup_ssl.sh"
    "setup_firewall.sh"
    "update_docker_compose.sh"
    "setup_monitoring.sh"
    "deploy_production.sh"
)

for script in "${executable_scripts[@]}"; do
    if [ -f "$script" ]; then
        if check_executable "$script" "Permiss√µes de $script"; then
            passed_checks=$((passed_checks + 1))
        fi
        total_checks=$((total_checks + 1))
    fi
done

echo ""
echo "üîç VERIFICANDO DIRET√ìRIOS E CONFIGURA√á√ïES..."
echo "============================================"

# Verificar diret√≥rios necess√°rios
directories=(
    "secrets:Diret√≥rio de segredos"
    "nginx:Diret√≥rio Nginx"
    "nginx/ssl:Diret√≥rio SSL"
    "nginx/logs:Diret√≥rio de logs"
    "backups:Diret√≥rio de backups"
)

for dir_info in "${directories[@]}"; do
    IFS=':' read -r dir description <<< "$dir_info"
    
    if [ -d "$dir" ]; then
        echo "‚úÖ $description: $dir"
        passed_checks=$((passed_checks + 1))
    else
        echo "‚ö†Ô∏è $description: $dir (Ser√° criado durante a execu√ß√£o)"
        passed_checks=$((passed_checks + 1))  # N√£o √© um erro cr√≠tico
    fi
    total_checks=$((total_checks + 1))
done

echo ""
echo "üîç VERIFICANDO INTEGRIDADE DO SISTEMA..."
echo "========================================"

# Verificar arquivos principais do sistema
main_files=(
    "docker-compose.yml:Arquivo de orquestra√ß√£o Docker"
    "backend/src/main.py:Aplica√ß√£o Flask principal"
    "frontend/src/App.jsx:Aplica√ß√£o React principal"
)

for file_info in "${main_files[@]}"; do
    IFS=':' read -r file description <<< "$file_info"
    
    if check_file "$file" "$description"; then
        passed_checks=$((passed_checks + 1))
    fi
    total_checks=$((total_checks + 1))
done

echo ""
echo "=============================================="
echo "  RESUMO DA VALIDA√á√ÉO"
echo "=============================================="
echo "Total de verifica√ß√µes: $total_checks"
echo "Verifica√ß√µes aprovadas: $passed_checks"
echo "Taxa de sucesso: $((passed_checks * 100 / total_checks))%"
echo ""

if [ $passed_checks -eq $total_checks ]; then
    echo "üéâ VALIDA√á√ÉO CONCLU√çDA COM SUCESSO!"
    echo "Todos os scripts e arquivos necess√°rios est√£o presentes e corretos."
    echo ""
    echo "Pr√≥ximos passos:"
    echo "1. Execute: ./deploy_production.sh"
    echo "2. Siga as instru√ß√µes no terminal"
    echo "3. Configure SSL e firewall conforme necess√°rio"
    echo "4. Deploy os containers com docker-compose"
else
    echo "‚ö†Ô∏è VALIDA√á√ÉO CONCLU√çDA COM ALGUNS PROBLEMAS"
    echo "Alguns arquivos ou configura√ß√µes precisam de aten√ß√£o."
    echo "Verifique os itens marcados com ‚ùå ou ‚ö†Ô∏è acima."
fi

echo "=============================================="
