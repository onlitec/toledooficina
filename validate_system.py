#!/usr/bin/env python3
"""
Script de valida√ß√£o do sistema ERP Oficina Mec√¢nica
Verifica a integridade de todos os componentes do sistema
"""

import os
import json
import yaml
import sys
from pathlib import Path

def check_file_exists(filepath, description):
    """Verifica se um arquivo existe"""
    if os.path.exists(filepath):
        print(f"‚úÖ {description}: {filepath}")
        return True
    else:
        print(f"‚ùå {description}: {filepath} - ARQUIVO N√ÉO ENCONTRADO")
        return False

def check_directory_exists(dirpath, description):
    """Verifica se um diret√≥rio existe"""
    if os.path.isdir(dirpath):
        print(f"‚úÖ {description}: {dirpath}")
        return True
    else:
        print(f"‚ùå {description}: {dirpath} - DIRET√ìRIO N√ÉO ENCONTRADO")
        return False

def validate_json_file(filepath, description):
    """Valida se um arquivo JSON est√° bem formado"""
    try:
        with open(filepath, 'r') as f:
            json.load(f)
        print(f"‚úÖ {description}: JSON v√°lido")
        return True
    except json.JSONDecodeError as e:
        print(f"‚ùå {description}: JSON inv√°lido - {e}")
        return False
    except FileNotFoundError:
        print(f"‚ùå {description}: Arquivo n√£o encontrado")
        return False

def validate_yaml_file(filepath, description):
    """Valida se um arquivo YAML est√° bem formado"""
    try:
        with open(filepath, 'r') as f:
            yaml.safe_load(f)
        print(f"‚úÖ {description}: YAML v√°lido")
        return True
    except yaml.YAMLError as e:
        print(f"‚ùå {description}: YAML inv√°lido - {e}")
        return False
    except FileNotFoundError:
        print(f"‚ùå {description}: Arquivo n√£o encontrado")
        return False

def check_python_imports(filepath, description):
    """Verifica se um arquivo Python pode ser importado"""
    try:
        # Adicionar o diret√≥rio ao path temporariamente
        import importlib.util
        spec = importlib.util.spec_from_file_location("module", filepath)
        if spec is None:
            print(f"‚ùå {description}: N√£o foi poss√≠vel criar spec")
            return False
        
        module = importlib.util.module_from_spec(spec)
        # N√£o executar o m√≥dulo, apenas verificar sintaxe
        with open(filepath, 'r') as f:
            compile(f.read(), filepath, 'exec')
        print(f"‚úÖ {description}: Sintaxe Python v√°lida")
        return True
    except SyntaxError as e:
        print(f"‚ùå {description}: Erro de sintaxe - {e}")
        return False
    except Exception as e:
        print(f"‚ùå {description}: Erro - {e}")
        return False

def main():
    """Fun√ß√£o principal de valida√ß√£o"""
    print("üîç VALIDA√á√ÉO DO SISTEMA ERP OFICINA MEC√ÇNICA")
    print("=" * 50)
    
    errors = 0
    
    # Verificar estrutura de diret√≥rios
    print("\nüìÅ ESTRUTURA DE DIRET√ìRIOS")
    print("-" * 30)
    
    directories = [
        ("backend", "Backend Flask"),
        ("backend/src", "C√≥digo fonte backend"),
        ("backend/src/models", "Modelos de dados"),
        ("backend/src/routes", "Rotas da API"),
        ("frontend", "Frontend React"),
        ("frontend/src", "C√≥digo fonte frontend"),
        ("frontend/src/components", "Componentes React"),
        ("frontend/src/components/pages", "P√°ginas da aplica√ß√£o"),
    ]
    
    for dirpath, description in directories:
        if not check_directory_exists(dirpath, description):
            errors += 1
    
    # Verificar arquivos principais
    print("\nüìÑ ARQUIVOS PRINCIPAIS")
    print("-" * 30)
    
    main_files = [
        ("README.md", "Documenta√ß√£o principal"),
        ("docker-compose.yml", "Orquestra√ß√£o Docker"),
        ("backend/Dockerfile", "Container backend"),
        ("frontend/Dockerfile", "Container frontend"),
        ("backend/requirements.txt", "Depend√™ncias Python"),
        ("frontend/package.json", "Depend√™ncias Node.js"),
        ("backend/src/main.py", "Aplica√ß√£o Flask principal"),
        ("frontend/src/App.jsx", "Componente React principal"),
    ]
    
    for filepath, description in main_files:
        if not check_file_exists(filepath, description):
            errors += 1
    
    # Verificar modelos de dados
    print("\nüóÑÔ∏è MODELOS DE DADOS")
    print("-" * 30)
    
    models = [
        ("backend/src/models/user.py", "Modelo User"),
        ("backend/src/models/cliente.py", "Modelo Cliente"),
        ("backend/src/models/veiculo.py", "Modelo Veiculo"),
        ("backend/src/models/peca.py", "Modelo Peca"),
        ("backend/src/models/ferramenta.py", "Modelo Ferramenta"),
        ("backend/src/models/ordem_servico.py", "Modelo OrdemServico"),
        ("backend/src/models/financeiro.py", "Modelo Financeiro"),
        ("backend/src/models/configuracao.py", "Modelo Configuracao"),
    ]
    
    for filepath, description in models:
        if check_file_exists(filepath, description):
            if not check_python_imports(filepath, description):
                errors += 1
        else:
            errors += 1
    
    # Verificar rotas da API
    print("\nüõ£Ô∏è ROTAS DA API")
    print("-" * 30)
    
    routes = [
        ("backend/src/routes/user.py", "Rotas User"),
        ("backend/src/routes/cliente.py", "Rotas Cliente"),
        ("backend/src/routes/relatorios.py", "Rotas Relat√≥rios"),
        ("backend/src/routes/configuracao.py", "Rotas Configura√ß√£o"),
    ]
    
    for filepath, description in routes:
        if check_file_exists(filepath, description):
            if not check_python_imports(filepath, description):
                errors += 1
        else:
            errors += 1
    
    # Verificar componentes React
    print("\n‚öõÔ∏è COMPONENTES REACT")
    print("-" * 30)
    
    components = [
        ("frontend/src/components/Sidebar.jsx", "Sidebar"),
        ("frontend/src/components/Header.jsx", "Header"),
        ("frontend/src/components/pages/Dashboard.jsx", "Dashboard"),
        ("frontend/src/components/pages/Clientes.jsx", "Clientes"),
        ("frontend/src/components/pages/Veiculos.jsx", "Ve√≠culos"),
        ("frontend/src/components/pages/Estoque.jsx", "Estoque"),
        ("frontend/src/components/pages/Ferramentas.jsx", "Ferramentas"),
        ("frontend/src/components/pages/OrdensServico.jsx", "Ordens de Servi√ßo"),
        ("frontend/src/components/pages/Financeiro.jsx", "Financeiro"),
        ("frontend/src/components/pages/Relatorios.jsx", "Relat√≥rios"),
        ("frontend/src/components/pages/Configuracoes.jsx", "Configura√ß√µes"),
    ]
    
    for filepath, description in components:
        if not check_file_exists(filepath, description):
            errors += 1
    
    # Verificar arquivos de configura√ß√£o
    print("\n‚öôÔ∏è ARQUIVOS DE CONFIGURA√á√ÉO")
    print("-" * 30)
    
    # Validar package.json
    if check_file_exists("frontend/package.json", "Package.json"):
        if not validate_json_file("frontend/package.json", "Package.json"):
            errors += 1
    else:
        errors += 1
    
    # Validar docker-compose.yml
    if check_file_exists("docker-compose.yml", "Docker Compose"):
        if not validate_yaml_file("docker-compose.yml", "Docker Compose"):
            errors += 1
    else:
        errors += 1
    
    # Verificar arquivos Docker
    print("\nüê≥ ARQUIVOS DOCKER")
    print("-" * 30)
    
    docker_files = [
        ("backend/.dockerignore", "Backend .dockerignore"),
        ("frontend/.dockerignore", "Frontend .dockerignore"),
        ("frontend/nginx.conf", "Configura√ß√£o Nginx"),
    ]
    
    for filepath, description in docker_files:
        if not check_file_exists(filepath, description):
            errors += 1
    
    # Verificar arquivos de documenta√ß√£o
    print("\nüìö DOCUMENTA√á√ÉO")
    print("-" * 30)
    
    docs = [
        ("test_system.md", "Plano de testes"),
        ("validate_system.py", "Script de valida√ß√£o"),
    ]
    
    for filepath, description in docs:
        if not check_file_exists(filepath, description):
            errors += 1
    
    # Resumo final
    print("\n" + "=" * 50)
    print("üìä RESUMO DA VALIDA√á√ÉO")
    print("=" * 50)
    
    if errors == 0:
        print("üéâ SISTEMA V√ÅLIDO! Todos os componentes est√£o presentes e corretos.")
        print("‚úÖ O sistema est√° pronto para deploy com Docker.")
        return 0
    else:
        print(f"‚ö†Ô∏è ENCONTRADOS {errors} PROBLEMAS no sistema.")
        print("‚ùå Corrija os problemas antes do deploy.")
        return 1

if __name__ == "__main__":
    sys.exit(main())

