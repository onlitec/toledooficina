version: '3.8'

services:
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: erp-oficina-backend
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=sqlite:///src/database/app.db
      - PYTHONPATH=/app
    volumes:
      - backend_data:/app/src/database
      - uploads_data:/app/uploads
      - backups_data:/app/backups
    networks:
      - erp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/users"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: erp-oficina-frontend
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_started
    networks:
      - erp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database (opcional, para produção)
  postgres:
    image: postgres:15-alpine
    container_name: erp-oficina-postgres
    environment:
      POSTGRES_DB: erp_oficina
      POSTGRES_USER: erp_user
      POSTGRES_PASSWORD: erp_password_2024
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - erp-network
    restart: unless-stopped
    profiles:
      - production
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U erp_user -d erp_oficina"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para cache (opcional)
  redis:
    image: redis:7-alpine
    container_name: erp-oficina-redis
    volumes:
      - redis_data:/data
    networks:
      - erp-network
    restart: unless-stopped
    profiles:
      - production
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (para produção)
  nginx:
    image: nginx:alpine
    container_name: erp-oficina-nginx
    ports:
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      frontend:
        condition: service_started
    networks:
      - erp-network
    restart: unless-stopped
    profiles:
      - production

networks:
  erp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.100.0.0/16

volumes:
  backend_data:
    driver: local
  uploads_data:
    driver: local
  backups_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local

