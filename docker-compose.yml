version: '3.8'

services:
<<<<<<< HEAD
=======
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: erp-oficina-backend
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=sqlite:///src/database/app.db
      - PYTHONPATH=/app
    volumes:
      - backend_data:/app/src/database
      - uploads_data:/app/uploads
      - backups_data:/app/backups
    networks:
      - erp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/users"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: erp-oficina-frontend
    depends_on:
      backend:
        condition: service_started
    networks:
      - erp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database (opcional, para produção)
>>>>>>> fab928f (Implementação completa dos cadastros e correção do sistema de toast)
  postgres:
    image: postgres:15
    container_name: postgres-${COOLIFY_CONTAINER_NAME:-local}-${RANDOM_ID:-001}
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-oficina_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 5
    labels:
      - "coolify.managed=true"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend-${COOLIFY_CONTAINER_NAME:-local}-${RANDOM_ID:-001}
    environment:
      - FLASK_ENV=production
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres123}
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB:-oficina_db}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-here}
      - CORS_ORIGINS=https://${COOLIFY_FQDN:-localhost},http://localhost:3000
    # Remover mapeamento de porta para Coolify
    ports:
      - "5000:5000"
    expose:
      - "5000"
    volumes:
      - ./backend/uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    labels:
      - "coolify.managed=true"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.coolify
      args:
        - Pass=${Pass:-}
    container_name: frontend-${COOLIFY_CONTAINER_NAME:-local}-${RANDOM_ID:-001}
    environment:
      - REACT_APP_API_URL=https://${COOLIFY_FQDN:-localhost}
      - REACT_APP_BACKEND_URL=https://${COOLIFY_FQDN:-localhost}
      - Pass=${Pass:-}
    # Remover mapeamento de porta para Coolify
    expose:
      - "7080"
    depends_on:
      - backend
    networks:
      - app-network
    labels:
      - "coolify.managed=true"

  nginx:
    image: nginx:alpine
    container_name: nginx-${COOLIFY_CONTAINER_NAME:-local}-${RANDOM_ID:-001}
    volumes:
      - ./nginx/nginx.coolify.conf:/etc/nginx/nginx.conf:ro
    # Mapeamento de porta para acesso local
    ports:
      - "7080:80"
    expose:
      - "80"
    depends_on:
      - backend
      - frontend
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "coolify.managed=true"
      - "coolify.type=application"
      - "coolify.name=erp-oficina-nginx"
      # Labels do Traefik para roteamento automático
      - "traefik.enable=true"
      - "traefik.http.routers.erp-oficina.rule=Host(`${COOLIFY_FQDN:-oficina.onlitec.com.br}`)"
      - "traefik.http.routers.erp-oficina.tls=true"
      - "traefik.http.routers.erp-oficina.tls.certresolver=letsencrypt"
      - "traefik.http.services.erp-oficina.loadbalancer.server.port=80"

volumes:
  postgres_data:
    labels:
      - "coolify.managed=true"

networks:
  app-network:
    driver: bridge
    labels:
      - "coolify.managed=true"
