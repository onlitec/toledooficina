version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: erp-oficina-backend
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB:-erp_oficina}
      - POSTGRES_USER=${POSTGRES_USER:-erp_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-Erp@2024#Prod$Secure!9876}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - ENVIRONMENT=production
    volumes:
      - backend_data:/app/data
      - uploads_data:/app/uploads
      - backups_data:/app/backups
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - erp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: erp-oficina-frontend
    depends_on:
      - backend
    networks:
      - erp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    container_name: erp-oficina-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-erp_oficina}
      - POSTGRES_USER=${POSTGRES_USER:-erp_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-Erp@2024#Prod$Secure!9876}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - erp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-erp_user} -d ${POSTGRES_DB:-erp_oficina}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: erp-oficina-nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - erp-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.erp-oficina.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.routers.erp-oficina.entrypoints=websecure"
      - "traefik.http.routers.erp-oficina.tls.certresolver=letsencrypt"
      - "traefik.http.services.erp-oficina.loadbalancer.server.port=80"
      - "traefik.http.routers.erp-oficina-http.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.routers.erp-oficina-http.entrypoints=web"
      - "traefik.http.routers.erp-oficina-http.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  backend_data:
    driver: local
  uploads_data:
    driver: local
  backups_data:
    driver: local
  postgres_data:
    driver: local

networks:
  erp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.101.0.0/16