version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: postgres-${COOLIFY_CONTAINER_NAME:-local}
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-oficina_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 5
    labels:
      - "coolify.managed=true"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend-${COOLIFY_CONTAINER_NAME:-local}
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres123}@postgres:5432/${POSTGRES_DB:-oficina_db}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-here}
      - CORS_ORIGINS=http://localhost:3000,http://localhost:7080,https://${COOLIFY_FQDN:-localhost}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    labels:
      - "coolify.managed=true"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend-${COOLIFY_CONTAINER_NAME:-local}
    environment:
      - REACT_APP_API_URL=http://localhost:5000
      - REACT_APP_BACKEND_URL=${REACT_APP_BACKEND_URL:-http://localhost:5000}
    expose:
      - "7080"
    networks:
      - app-network
    labels:
      - "coolify.managed=true"

  nginx:
    image: nginx:alpine
    container_name: erp-oficina-nginx
    labels:
      - "coolify.managed=true"
      - "coolify.type=application"
      - "coolify.name=erp-oficina-nginx"
      - "traefik.enable=true"
      - "traefik.http.routers.erp-oficina.rule=Host(`oficina.onlitec.com.br`)"
      - "traefik.http.routers.erp-oficina.tls=true"
      - "traefik.http.routers.erp-oficina.tls.certresolver=letsencrypt"
      - "traefik.http.services.erp-oficina.loadbalancer.server.port=80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    expose:
      - "80"
    depends_on:
      - backend
      - frontend
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    labels:
      - "coolify.managed=true"

networks:
  app-network:
    driver: bridge
    labels:
      - "coolify.managed=true"